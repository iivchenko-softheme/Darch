<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RepositoryLib</name>
    </assembly>
    <members>
        <member name="T:RepositoryLib.IRepository`2">
            <summary>
            Represents generic mechanism to manipulate with abstract storage.
            </summary>
            <typeparam name="TItem">Type that should be stored in the storage.</typeparam>
            <typeparam name="TId">Type that represents unique identifier for each item in storage.</typeparam>
        </member>
        <member name="M:RepositoryLib.IRepository`2.GetById(`1)">
            <summary>
            Returns an item by its identifier.
            </summary>
            <param name="id">Unique identifier of the item.</param>
            <returns>Return item from the storage.</returns>
        </member>
        <member name="M:RepositoryLib.IRepository`2.Add(`0)">
            <summary>
            Adds new item to the storage.
            </summary>
            <param name="item">New item to store in the repository.</param>
            <returns>Unique identifier for the new item.</returns>
        </member>
        <member name="M:RepositoryLib.IRepository`2.Delete(`1)">
            <summary>
            Deletes item from the storage by its identifier.
            </summary>
            <param name="id">Unique identifier of the item.</param>
        </member>
        <member name="M:RepositoryLib.IRepository`2.Update(`1,`0)">
            <summary>
            Find item by identifier and replace it with new item.
            </summary>
            <param name="id">Unique identifier of the item.</param>
            <param name="item">New item that must replace the old one.</param>
        </member>
        <member name="P:RepositoryLib.IRepository`2.Count">
            <summary>
            Gets number of items in the storage.
            </summary>
        </member>
        <member name="P:RepositoryLib.IRepository`2.All">
            <summary>
            Gets enumerator to enumerate each item of the storage.
            </summary>
        </member>
        <member name="T:RepositoryLib.IStreamMapper`1">
            <summary>
            Provides conversation of <see cref="!:TItem"/> to a byte array and a byte array to an <see cref="!:TItem"/>
            </summary>
            <typeparam name="TItem">Type that should be stored in the storage.</typeparam>
        </member>
        <member name="M:RepositoryLib.IStreamMapper`1.Convert(`0)">
            <summary>
            Convert <see cref="!:TItem"/> to a byte array. 
            </summary>
        </member>
        <member name="M:RepositoryLib.IStreamMapper`1.Convert(System.Byte[])">
            <summary>
            Convert a byte array to a <see cref="!:TItem"/>. 
            </summary>
        </member>
        <member name="T:RepositoryLib.ItemCorruptedException">
            <summary>
            The exception that is thrown when a Repository item is corrupted in any way.
            </summary>
        </member>
        <member name="T:RepositoryLib.RepositoryException">
            <summary>
            Base for all Repository exceptions.
            </summary>
        </member>
        <member name="M:RepositoryLib.RepositoryException.#ctor">
            <summary>
            Initializes a new instance of the RepositoryException class.
            </summary>
        </member>
        <member name="M:RepositoryLib.RepositoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RepositoryException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:RepositoryLib.RepositoryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the RepositoryException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:RepositoryLib.RepositoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the RepositoryException class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination. </param>
        </member>
        <member name="T:RepositoryLib.MissingItemException">
            <summary>
            The exception that is thrown when a Repository doesn't contain item with specified ID.
            </summary>
        </member>
        <member name="T:RepositoryLib.RepositoryItem`2">
            <summary>
            Holder for <see cref="!:TItem"/> data and its <see cref="!:TId"/>.
            </summary>
            <typeparam name="TId">Type that represent <see cref="!:TItem"/> unique identifier.</typeparam>
            <typeparam name="TItem">Type that should be stored in the storage.</typeparam>
        </member>
        <member name="T:RepositoryLib.StreamRepository`1">
            <summary>
            The repository based on .net Stream. The stream is a storage used by the Repository.
            </summary>
            <typeparam name="TItem">Type that should be stored in the storage.</typeparam>
        </member>
        <member name="M:RepositoryLib.StreamRepository`1.#ctor(System.IO.Stream,RepositoryLib.IStreamMapper{`0},System.Int32)">
            <summary>
            Initializes a new instance of the StreamRepository class.
            </summary>
            <param name="stream">A stream which will be used as a storage for items.</param>
            <param name="streamMapper">Provides conversation algorithms from <see cref="!:TItem"/> to a bytes and from bytes to a <see cref="!:TItem"/> to write and read <see cref="!:TItem"/> from <param name="stream"/>.</param>
            <param name="itemSize">Size of each <see cref="!:TItem"/> in bytes.</param>
        </member>
    </members>
</doc>
